PROJECT_NAME = 3dmodelio

# VERSION_MAJOR, VERSION_MINOR, and VERSION_TWEAK are available as preprocessor macros for all source files in the project
VERSION_MAJOR = 0
VERSION_MINOR = 0
VERSION_TWEAK = 0
PROJECT_VERSION = ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_TWEAK}

LIBRARY_TARGETS = library
EXECUTABLE_TARGETS = meshutils unittest
APPLICATION_TARGETS = testharness

# TARGET_NAME_${target} required for each target of any type; HUMAN_READABLE_TARGET_NAME_${target} required for each application target. Default values for TARGET_NAME_* shown below.
#TARGET_NAME_library = libstem_${PROJECT_NAME}
#TARGET_NAME_unittest = ${PROJECT_NAME}_unittest
#TARGET_NAME_testharness = ${PROJECT_NAME}_testharness
TARGET_NAME_meshutils = meshutils
HUMAN_READABLE_TARGET_NAME_testharness = 3D\ Model\ IO

# Patterns: PLATFORMS, PLATFORMS_${target}
PLATFORMS = macosx iphonesimulator iphoneos linux32 linux64 win32 win64
PLATFORMS_meshutils = macosx linux32 linux64 win32 win64
TARGET_PLATFORMS_meshutils = ${filter ${TARGET_PLATFORMS},${PLATFORMS_meshutils}}
CONFIGURATIONS_meshutils = debug profile

# Patterns: CCFLAGS, CCFLAGS_${target}, CCFLAGS_${configuration}, CCFLAGS_${platform}, CCFLAGS_${target}_${configuration}, CCFLAGS_${target}_${platform}, CCFLAGS_${configuration}_${platform}, CCFLAGS_${target}_${configuration}_${platform}
CCFLAGS = 

# Patterns: LINKFLAGS, LINKFLAGS_${target}, LINKFLAGS_${configuration}, LINKFLAGS_${platform}, LINKFLAGS_${target}_${configuration}, LINKFLAGS_${target}_${platform}, LINKFLAGS_${configuration}_${platform}
LINKFLAGS = 

# PROJECT_LIBRARY_DEPENDENCIES_* refers to entries in LIBRARY_TARGETS to be linked when building the specified target
# Patterns: PROJECT_LIBRARY_DEPENDENCIES_${target}, PROJECT_LIBRARY_DEPENDENCIES_${target}_${platform}
PROJECT_LIBRARY_DEPENDENCIES_unittest = library
PROJECT_LIBRARY_DEPENDENCIES_meshutils = library
PROJECT_LIBRARY_DEPENDENCIES_testharness = library

# STEM_LIBRARY_DEPENDENCIES is specified as ${PROJECT_NAME}/${PROJECT_VERSION} for each stem library to be linked when building
# Patterns: STEM_LIBRARY_DEPENDENCIES, STEM_LIBRARY_DEPENDENCIES_${target}, STEM_LIBRARY_DEPENDENCIES_${platform}, STEM_LIBRARY_DEPENDENCIES_${target}_${platform}
STEM_LIBRARY_DEPENDENCIES = \
	gamemath/latest \
	glgraphics/latest \
	serialization/latest \
	stemobject/latest \
	utilities/latest
STEM_LIBRARY_DEPENDENCIES_unittest = unittest/latest
STEM_LIBRARY_DEPENDENCIES_testharness = \
	binaryserialization/latest \
	jsonserialization/latest \
	pngimageio/latest \
	resourcemanager/latest \
	shell/latest
STEM_LIBRARY_DEPENDENCIES_meshutils = \
	binaryserialization/latest \
	jsonserialization/latest
STEM_LIBRARY_DEPENDENCIES_testharness_macosx = nsopenglshell/latest
STEM_LIBRARY_DEPENDENCIES_testharness_win32 = wglshell/latest
STEM_LIBRARY_DEPENDENCIES_testharness_win64 = wglshell/latest

# THIRDPARTY_LIBRARY_DEPENDENCIES is specified as ${PROJECT_NAME}/${PROJECT_VERSION} for each thirdparty library to be linked when building
# Patterns: THIRDPARTY_LIBRARY_DEPENDENCIES, THIRDPARTY_LIBRARY_DEPENDENCIES_${target}, THIRDPARTY_LIBRARY_DEPENDENCIES_${platform}, THIRDPARTY_LIBRARY_DEPENDENCIES_${target}_${platform}
THIRDPARTY_LIBRARY_DEPENDENCIES = 
THIRDPARTY_LIBRARY_DEPENDENCIES_win32 = glew/2.0.0/libglew.a
THIRDPARTY_LIBRARY_DEPENDENCIES_win64 = glew/2.0.0/libglew.a

# Additional build prerequisites per target
# Patterns: PREREQS, PREREQS_${target}
PREREQS = 

SOURCES_library = \
	source/${PROJECT_NAME}/AnimationIO.c \
	source/${PROJECT_NAME}/ArmatureIO.c \
	source/${PROJECT_NAME}/MaterialData.c \
	source/${PROJECT_NAME}/MeshData.c \
	source/${PROJECT_NAME}/Obj3DModelIO.c \
	source/${PROJECT_NAME}/SceneLayout.c \
	source/${PROJECT_NAME}/TextureAtlasData.c

SOURCES_meshutils = \
	source/meshutils.c

# Executable targets named "unittest" should usually specify only SOURCES_unittest_suites, which must contain only test suite files.
# If files other than test suites are required, specify SOURCES_unittest.
SOURCES_unittest_suites = 

SOURCES_testharness = \
	source/testharness/TestHarness_main.c

# Public-facing include files to be distributed with the library, if any
INCLUDES = \
	source/${PROJECT_NAME}/AnimationIO.h \
	source/${PROJECT_NAME}/ArmatureIO.h \
	source/${PROJECT_NAME}/MaterialData.h \
	source/${PROJECT_NAME}/MeshData.h \
	source/${PROJECT_NAME}/Obj3DModelIO.h \
	source/${PROJECT_NAME}/SceneLayout.h \
	source/${PROJECT_NAME}/TextureAtlasData.h

# Patterns: RESOURCES, RESOURCES_${target}, RESOURCES_${platform}, RESOURCES_${target}_${platform}
RESOURCES_testharness = \
	resources/suzanne.obj

# Pattern: ANALYZER_EXCLUDE_SOURCES_${analyzer}
ANALYZER_EXCLUDE_SOURCES_clang = 
ANALYZER_EXCLUDE_SOURCES_splint = ${SOURCES_unittest_suites}

# Pattern: PLIST_FILE_${target}_${platform} (required for application targets on macosx, iphoneos, and iphonesimulator)
PLIST_FILE_testharness_macosx = resources/Info_testharness_macosx.plist
PLIST_FILE_testharness_iphonesimulator = resources/Info_testharness_iphone.plist
PLIST_FILE_testharness_iphoneos = resources/Info_testharness_iphone.plist

INSTALLED_TARGETS = library testharness meshutils

# Postamble to invoke stemconfig makefile. Do not modify.
UNAME = ${shell uname}
ifeq (${UNAME},Linux)
STEM_SHARED_DIR ?= /usr/local/stem
else ifeq (${UNAME},Darwin)
STEM_SHARED_DIR ?= /usr/local/stem
else
STEM_SHARED_DIR ?= C:/stem
endif
include ${STEM_SHARED_DIR}/Makefile.global
